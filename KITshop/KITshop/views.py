from django.http.response import HttpResponse

from product_catalog.models import Product

from django.template import loader
from django.shortcuts import render

import requests
from lxml import etree

# This function will be called for every request that matches the pattern 
# BASEURL/product/XYZ/ (see mapping in urls.py)
# The part XYZ of the URL will be mapped to the argument id
# Additionally every function called via an incoming HTTP request 
# has a default parameter request that contains information about the request
# We will learn about this later. The function triggered by the request is supposed
# to return a HttpResponse object to the calling client 

def product(request, id):           
        
    # Here we simply query the object with the given ID and return a string representation
    # You can try this by running the server (python manage.py runserver) and then calling 
    # http://localhost:8000/product/123/

    # In this solution, we actually use django templates (stored in the template directory) 
    # This follows the MVC model discussed in the context of Java Faces and ASP.NET MVS. The templates 
    # are HTML pages, which can include values generated by python code (stored in the context object)
    template = loader.get_template('KITshop/product.html')

    # We first retrieve the product data 
    product = Product.objects.filter(id=id).first()    

    # We additionally retrieve the most helpful review for this product from our C# Web Service
    # The resulting review.text will be an XML document (as specified in the ProductService web service)
    review = requests.get('http://localhost:8001/rest/products/123/MostHelpfulReview')
    
    # We create an XML document from the response
    xmldoc = etree.fromstring(review.text)

    # We then generate an XSLT Transformation based on the XSLT file (residing in the same path as this code file)
    xslt = etree.parse('./KITShop/Review.xslt')

    # We then transform the XML document into an HTML fragment and pass it to the template 
    transform = etree.XSLT(xslt)
    review_html = transform(xmldoc)
        
    # These variables can be acessed from within the templae (see product.html)
    context = {
        'product_id' : product.id,
        'product_name' : product.name,
        'product_price' : product.price,
        'review_html' : review_html,
    }    
        
    return HttpResponse(template.render(context, request))



# This function will be accessed by JavaScript via AJAX. It just retrieves the most critical review 
# from the C# REST service, and returns a transformed XML fragment 
def mostCriticalReview(request, id):

    review = requests.get('http://localhost:8001/rest/products/' + id + '/MostCriticalReview')
    
    # Just like above, we first retrieve an XML document 
    xmldoc = etree.fromstring(review.text)

    # We then generate an XSLT Transformation based on the XSLT file (residing in the same path as this code file)
    xslt = etree.parse('./KITShop/Review.xslt')

    # We then transform the XML document into an HTML body and return it to the client 
    transform = etree.XSLT(xslt)

    return HttpResponse(transform(xmldoc))



# This function will be accessed by JavaScript via AJAX. It just retrieves the most helpful review 
# from the C# REST service, and returns a transformed XML fragment 
def mostHelpfulReview(request, id):

    review = requests.get('http://localhost:8001/rest/products/' + id + '/MostHelpFulReview')
    
    # Just like above, we first retrieve an XML document 
    xmldoc = etree.fromstring(review.text)

    # We then generate an XSLT Transformation based on the XSLT file (residing in the same path as this code file)
    xslt = etree.parse('./KITShop/Review.xslt')

    # We then transform the XML document into an HTML body and return it to the client 
    transform = etree.XSLT(xslt)

    return HttpResponse(transform(xmldoc))